{"ast":null,"code":"var _jsxFileName = \"/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport QuestionList from \"../components/QuestionList\";\nimport Question from \"../components/Question\";\nimport EditForm from \"../components/EditForm\";\nimport DeleteConfirmation from \"../components/DeleteConfirmation\";\nimport Modal from \"../layout/Modal\";\nimport Backdrop from \"../layout/Backdrop\";\nimport csrftoken from \"../utils/csrf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPage() {\n  _s();\n\n  let [choices, setChoices] = useState([]);\n  let [questions, setQuestions] = useState([]);\n  let [toEditQuestion, setToEditQuestion] = useState(null);\n  let [showModal, setShowModal] = useState(false);\n  let [showEdit, setShowEdit] = useState(false);\n  let [showDelete, setShowDelete] = useState(false);\n  let [pageLoading, setPageLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/polls/\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setQuestions(data);\n      setPageLoading(false);\n    });\n  }, []);\n\n  function handleShowModal() {\n    setShowModal(prevState => {\n      return !prevState;\n    });\n    setShowEdit(prevState => {\n      if (prevState) return !prevState;\n      return prevState;\n    });\n    setToEditQuestion(null);\n    setShowDelete(prevState => {\n      if (prevState) return !prevState;\n      return prevState;\n    });\n  }\n\n  function handleOpenEdit(e) {\n    let questionId = e.target.name;\n    handleShowModal();\n    fetch(`http://127.0.0.1:8000/polls/${questionId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      /* must call after show modal since show modal\n       * will call setShowEdit(false) and setToEditQuestion(false)\n       * if it finds it true showEdit as true\n       */\n      setToEditQuestion(data.question);\n      setChoices(data.choices);\n      setShowEdit(true);\n    });\n  }\n\n  function handleOpenDelete() {\n    handleShowModal();\n    /* must call after show modal since show modal\n     * will call setShowEdit(false) if it finds it true\n     * in order to handle the closing logic\n     */\n\n    setShowDelete(true);\n  }\n\n  function handleEditSubmit(e) {\n    if (toEditQuestion === null) throw new Error(\"no question to edit\");\n    let questionId = toEditQuestion.id;\n    /* name of button in each choice of EditForm has the id of the\n     * corresponding choice\n     */\n\n    let choiceId = e.target.name;\n    fetch(`http://127.0.0.1:8000/polls/${questionId}/vote/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken\n      },\n      body: JSON.stringify({\n        choice: choiceId\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      /* will take care of setShowEdit and\n       * setToEditQuestion\n       */\n\n      setShowModal(false);\n    });\n  }\n  /*\n  function handleDeleteConfirmation()\n  {\n  }\n  */\n\n\n  let qcomps = questions.map(q => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      q: q,\n      onDelete: handleOpenDelete,\n      onEdit: handleOpenEdit\n    }, q.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this);\n  });\n\n  let extraContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      children: showDelete ? /*#__PURE__*/_jsxDEV(DeleteConfirmation, {\n        onCancel: handleShowModal,\n        question: questions[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this) : showEdit ? /*#__PURE__*/_jsxDEV(EditForm, {\n        question: toEditQuestion,\n        choices: choices,\n        onCancel: handleShowModal,\n        onEditSubmit: handleEditSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      onClick: handleShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [pageLoading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(QuestionList, {\n      children: qcomps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this), showModal && extraContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MainPage, \"M1Iymb9QKnRAFbfovflVihgwDT4=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/MainPage.js"],"names":["React","useState","useEffect","QuestionList","Question","EditForm","DeleteConfirmation","Modal","Backdrop","csrftoken","MainPage","choices","setChoices","questions","setQuestions","toEditQuestion","setToEditQuestion","showModal","setShowModal","showEdit","setShowEdit","showDelete","setShowDelete","pageLoading","setPageLoading","fetch","method","headers","then","res","json","data","handleShowModal","prevState","handleOpenEdit","e","questionId","target","name","question","handleOpenDelete","handleEditSubmit","Error","id","choiceId","body","JSON","stringify","choice","console","log","qcomps","map","q","extraContent"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nimport QuestionList from \"../components/QuestionList\";\nimport Question from \"../components/Question\";\nimport EditForm from \"../components/EditForm\";\nimport DeleteConfirmation from \"../components/DeleteConfirmation\";\n\nimport Modal from \"../layout/Modal\";\nimport Backdrop from \"../layout/Backdrop\";\n\nimport csrftoken from \"../utils/csrf\";\n\nfunction MainPage()\n{\n\n\tlet [ choices, setChoices ] = useState([]);\n\tlet [ questions, setQuestions ] = useState([])\n\tlet [ toEditQuestion, setToEditQuestion ] = useState(null);\n\n\tlet [ showModal, setShowModal] = useState(false);\n\tlet [ showEdit, setShowEdit ] = useState(false);\n\tlet [ showDelete, setShowDelete ] = useState(false);\n\tlet [ pageLoading, setPageLoading ] = useState(true);\n\n\tuseEffect(()=>{\n\t\tfetch(\"http://127.0.0.1:8000/polls/\", {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-CSRFToken\": csrftoken,\n\t\t\t}\n\t\t}).then((res)=>{\n\t\t\treturn res.json();\n\t\t}).then((data)=>{\n\t\t\tsetQuestions(data);\n\t\t\tsetPageLoading(false);\n\t\t});\n\t}, []);\n\n\tfunction handleShowModal()\n\t{\n\t\tsetShowModal((prevState)=> {\n\t\t\treturn !prevState;\n\t\t});\n\n\t\tsetShowEdit((prevState)=> {\n\t\t\tif (prevState)\n\t\t\t\treturn !prevState;\n\t\t\treturn prevState;\n\t\t});\n\n\t\tsetToEditQuestion(null);\n\n\t\tsetShowDelete((prevState)=> {\n\t\t\tif (prevState)\n\t\t\t\treturn !prevState;\n\t\t\treturn prevState;\n\t\t});\n\n\t}\n\n\tfunction handleOpenEdit(e)\n\t{\n\t\tlet questionId = e.target.name;\n\t\thandleShowModal();\n\t\tfetch(`http://127.0.0.1:8000/polls/${questionId}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-CSRFToken\": csrftoken,\n\t\t\t}\n\t\t}).then((res)=>{\n\t\t\treturn res.json();\n\t\t}).then((data)=>{\n\t\t\t/* must call after show modal since show modal\n\t\t\t * will call setShowEdit(false) and setToEditQuestion(false)\n\t\t\t * if it finds it true showEdit as true\n\t\t\t */\n\t\t\tsetToEditQuestion(data.question);\n\t\t\tsetChoices(data.choices);\n\t\t\tsetShowEdit(true);\n\t\t});\n\t}\n\n\tfunction handleOpenDelete()\n\t{\n\t\thandleShowModal();\n\t\t/* must call after show modal since show modal\n\t\t * will call setShowEdit(false) if it finds it true\n\t\t * in order to handle the closing logic\n\t\t */\n\t\tsetShowDelete(true);\n\t}\n\n\tfunction handleEditSubmit(e)\n\t{\n\t\tif (toEditQuestion === null)\n\t\t\tthrow new Error(\"no question to edit\");\n\n\t\tlet questionId = toEditQuestion.id;\n\t\t/* name of button in each choice of EditForm has the id of the\n\t\t * corresponding choice\n\t\t */\n\t\tlet choiceId = e.target.name;\n\t\tfetch(`http://127.0.0.1:8000/polls/${questionId}/vote/`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-CSRFToken\": csrftoken,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tchoice: choiceId,\n\t\t\t\t}),\n\t\t}).then((res)=>{\n\t\t\treturn res.json();\n\t\t}).then((data)=>{\n\t\t\tconsole.log(data);\n\t\t\t/* will take care of setShowEdit and\n\t\t\t * setToEditQuestion\n\t\t\t */\n\t\t\tsetShowModal(false);\n\t\t});\n\t}\n\n\t/*\n\tfunction handleDeleteConfirmation()\n\t{\n\t}\n\t*/\n\n\tlet qcomps = questions.map((q) => {\n\t\treturn (\n\t\t\t\t<Question key={ q.id }\n\t\t\t\tq={ q }\n\t\t\t\tonDelete={ handleOpenDelete }\n\t\t\t\tonEdit={ handleOpenEdit }\n\t\t\t\t/>\n\t\t);\n\t});\n\n\tlet extraContent = (\n\t\t<React.Fragment>\n\t\t<Modal>\n\t\t\t{ showDelete ?\n\t\t\t\t<DeleteConfirmation onCancel={ handleShowModal } question={ questions[0] }/>\n\t\t\t:\n\t\t\tshowEdit ?\n\t\t\t\t<EditForm\n\t\t\t\tquestion={ toEditQuestion }\n\t\t\t\tchoices={ choices }\n\t\t\t\tonCancel={ handleShowModal }\n\t\t\t\tonEditSubmit={ handleEditSubmit }\n\t\t\t\t/>\n\t\t\t:\n\t\t\t<h1>Loading</h1>\n\t\t\t}\n\t\t</Modal>\n\t\t<Backdrop onClick={ handleShowModal } />\n\t\t</React.Fragment>\n\t);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{ pageLoading ?\n\t\t\t\t<h1>Loading</h1>\n\t\t\t:\n\t\t\t\t<QuestionList>{ qcomps }</QuestionList>\n\t\t\t}\n\t\t\t{ showModal && extraContent }\n\t\t</React.Fragment>\n\t);\n}\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}