{"ast":null,"code":"var _jsxFileName = \"/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/CreateQuestion.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateQuestion() {\n  _s();\n\n  let [choices, setChoices] = useState({});\n  let questionInputRef = useRef();\n\n  function handleAddChoice(e) {\n    e.preventDefault();\n    setChoices(prevState => {\n      /* key gets saved on \"name\" attribute @ getChoicesRows */\n      let key = getRandomString();\n      return { ...prevState,\n        [key]: {\n          \"choice_text\": \"\"\n        }\n      };\n    });\n  }\n\n  function handleChoiceChange(e) {\n    setChoices(prevState => {\n      /* key was saved on \"name\" attribute @ getChoicesRows */\n      let key = e.target.name;\n      return { ...prevState,\n        [key]: {\n          \"choice_text\": e.target.value\n        }\n      };\n    });\n  }\n\n  function handleChoiceDeletion(e) {\n    e.preventDefault();\n    setChoices(prevState => {\n      let key = e.target.name;\n      let newState = removeKey(key, prevState);\n      return newState;\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    let choicesList = getChoicesList(choices);\n    let questionText = questionInputRef.current.value;\n    fetch(\"http://127.0.0.1:8000/polls/create\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken\n      },\n      body: JSON.stringify({\n        choices: questions,\n        question\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      /* will take care of setShowEdit,\n       * setToTargetQuestion and setChoices\n       */\n      setShowModal(false);\n    });\n  }\n\n  let choicesRow = getChoicesRows(choices, handleChoiceChange, handleChoiceDeletion);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createForm\",\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Question Creation Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"questionLabel\",\n          htmlFor: \"question_text\",\n          children: \"Question Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"questionInput\",\n          name: \"question_text\",\n          type: \"text\",\n          required: true,\n          placeholder: \"Ex.: Why does javascript suck?\",\n          ref: questionInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 5\n        }, this), choicesRow, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button edit large\",\n          onClick: handleAddChoice,\n          children: \"add new choice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button create large\",\n          onClick: handleSubmit,\n          children: \"submit question!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n}\n\n_s(CreateQuestion, \"j6GIc/MLFhEHgUXYK8liw2UIJqQ=\");\n\n_c = CreateQuestion;\n\nfunction getChoicesRows(choices, handleChoiceChange, handleChoiceDeletion) {\n  let choicesRows = [];\n  let i = 0;\n\n  for (const [key, choice] of Object.entries(choices)) {\n    choicesRows.push(\n    /*#__PURE__*/\n\n    /* using key for unique identifier\n     * and as input/button name for extraction\n     * at handleChoiceChange and handleChoiceDeletion\n     */\n    _jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choiceInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"choice{ i }\",\n          children: [\"Choice \", i]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChoiceChange,\n          name: key,\n          type: \"text\",\n          required: true,\n          value: choice.choice_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChoiceDeletion,\n          name: key,\n          className: \"button delete\",\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this));\n    i++;\n  }\n\n  return choicesRows;\n}\n/* extraction of key before submition since it's just\n * useful for React\n */\n\n\nfunction getChoicesList(choices) {\n  let choicesList = [];\n\n  for (const [, choice] of Object.entries(choices)) {\n    choicesList.push(choice);\n  }\n\n  return choicesList;\n}\n/* useful when removing choices */\n\n\nfunction removeKey(rmKey, obj) {\n  let newObj = {};\n\n  for (const [key] of Object.entries(obj)) {\n    if (key === rmKey) continue;\n    newObj[key] = obj[key];\n  }\n\n  return newObj;\n}\n\nfunction getRandomString() {\n  return (Math.random() + 1).toString(36).substring(7);\n}\n\nexport default CreateQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateQuestion\");","map":{"version":3,"sources":["/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/CreateQuestion.js"],"names":["React","useState","useRef","CreateQuestion","choices","setChoices","questionInputRef","handleAddChoice","e","preventDefault","prevState","key","getRandomString","handleChoiceChange","target","name","value","handleChoiceDeletion","newState","removeKey","handleSubmit","choicesList","getChoicesList","questionText","current","fetch","method","headers","csrftoken","body","JSON","stringify","questions","question","then","res","json","data","setShowModal","choicesRow","getChoicesRows","choicesRows","i","choice","Object","entries","push","choice_text","rmKey","obj","newObj","Math","random","toString","substring"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useRef } from \"react\";\n\nfunction CreateQuestion()\n{\n\tlet [choices, setChoices] = useState({});\n\tlet questionInputRef = useRef();\n\n\tfunction handleAddChoice(e)\n\t{\n\t\te.preventDefault();\n\t\tsetChoices((prevState)=>{\n\t\t\t/* key gets saved on \"name\" attribute @ getChoicesRows */\n\t\t\tlet key = getRandomString();\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[key]: {\n\t\t\t\t\t\"choice_text\": \"\",\n\t\t\t\t}\n\t\t\t};\n\n\t\t});\n\t}\n\n\tfunction handleChoiceChange(e)\n\t{\n\t\tsetChoices((prevState)=>{\n\t\t\t/* key was saved on \"name\" attribute @ getChoicesRows */\n\t\t\tlet key = e.target.name;\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[key]: {\n\t\t\t\t\t\"choice_text\": e.target.value,\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction handleChoiceDeletion(e)\n\t{\n\t\te.preventDefault();\n\t\tsetChoices((prevState)=>{\n\t\t\tlet key = e.target.name;\n\t\t\tlet newState = removeKey(key, prevState);\n\t\t\treturn newState;\n\t\t});\n\t}\n\n\tfunction handleSubmit(e)\n\t{\n\t\te.preventDefault();\n\t\tlet choicesList = getChoicesList(choices);\n\t\tlet questionText = questionInputRef.current.value;\n\t\tfetch(\"http://127.0.0.1:8000/polls/create\", {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"X-CSRFToken\": csrftoken,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tchoices: questions,\n\t\t\t\tquestion\n\t\t\t\t}),\n\t\t}).then((res)=>{\n\t\t\treturn res.json();\n\t\t}).then((data)=>{\n\t\t\t/* will take care of setShowEdit,\n\t\t\t * setToTargetQuestion and setChoices\n\t\t\t */\n\t\t\tsetShowModal(false);\n\t\t});\n\t}\n\n\tlet choicesRow = getChoicesRows(choices, handleChoiceChange, handleChoiceDeletion);\n\treturn (\n\t\t<div className=\"createForm\">\n\t\t<fieldset>\n\t\t\t<legend>\n\t\t\t\t<h2>Question Creation Form</h2>\n\t\t\t</legend>\n\t\t\t<form>\n\t\t\t\t<label className=\"questionLabel\" htmlFor=\"question_text\">Question Text</label>\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"questionInput\"\n\t\t\t\t\tname=\"question_text\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Ex.: Why does javascript suck?\"\n\t\t\t\t\tref={ questionInputRef }\n\t\t\t\t/>\n\t\t\t\t{ choicesRow }\n\t\t\t\t<button className=\"button edit large\" onClick={ handleAddChoice }>add new choice</button>\n\t\t\t\t<button className=\"button create large\" onClick={ handleSubmit }>submit question!</button>\n\t\t\t</form>\n\t\t</fieldset>\n\t\t</div>\n\t);\n}\n\nfunction getChoicesRows(choices, handleChoiceChange, handleChoiceDeletion)\n{\n\tlet choicesRows = [];\n\tlet i = 0;\n\tfor (const [key, choice] of Object.entries(choices)) {\n\t\tchoicesRows.push(\n\t\t\t/* using key for unique identifier\n\t\t\t * and as input/button name for extraction\n\t\t\t * at handleChoiceChange and handleChoiceDeletion\n\t\t\t */\n\t\t\t<li key={ key }>\n\t\t\t\t<div className=\"choiceInput\">\n\t\t\t\t\t<label htmlFor=\"choice{ i }\">Choice { i }</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={ handleChoiceChange }\n\t\t\t\t\t\tname={ key }\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tvalue={ choice.choice_text }\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\tonClick={ handleChoiceDeletion }\n\t\t\t\t\tname={ key }\n\t\t\t\t\tclassName=\"button delete\">\n\t\t\t\t\t\t-\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t\ti++;\n\t}\n\treturn choicesRows;\n}\n\n/* extraction of key before submition since it's just\n * useful for React\n */\nfunction getChoicesList(choices)\n{\n\tlet choicesList = [];\n\tfor (const [, choice] of Object.entries(choices)) {\n\t\tchoicesList.push(choice);\n\t}\n\treturn choicesList;\n}\n\n/* useful when removing choices */\nfunction removeKey(rmKey, obj)\n{\n\tlet newObj = {};\n\tfor (const [key,] of Object.entries(obj)) {\n\t\tif (key === rmKey)\n\t\t\tcontinue;\n\t\tnewObj[key] = obj[key];\n\t}\n\treturn newObj;\n}\n\nfunction getRandomString()\n{\n\treturn (Math.random() + 1).toString(36).substring(7);\n}\n\nexport default CreateQuestion;\n"]},"metadata":{},"sourceType":"module"}