{"ast":null,"code":"var _jsxFileName = \"/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport QuestionList from \"../components/QuestionList\";\nimport Question from \"../components/Question\";\nimport EditForm from \"../components/EditForm\";\nimport DeleteConfirmation from \"../components/DeleteConfirmation\";\nimport Modal from \"../layout/Modal\";\nimport Backdrop from \"../layout/Backdrop\";\nimport csrftoken from \"../utils/csrf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainPage() {\n  _s();\n\n  /*\n  let questions = [\n  \t{\n  \t\tquestion_text: \"What?\",\n  \t\tid: 1,\n  \t},\n  \t{\n  \t\tquestion_text: \"Who?\",\n  \t\tid: 2,\n  \t},\n  \t{\n  \t\tquestion_text: \"What's the fastest animal alive?\",\n  \t\tid: 3,\n  \t}\n  ];\n  \tlet choices = [\n  \t{\n  \t\tid: 1,\n  \t\tchoice_text: \"Don't know\",\n  \t\tvotes: 0,\n  \t\tquestion: 1,\n  \t},\n  \t{\n  \t\tid: 2,\n  \t\tchoice_text: \"???\",\n  \t\tvotes: 2,\n  \t\tquestion: 1,\n  \t}\n  \t]\n  /* end of dummy values */\n  let [showModal, setShowModal] = useState(false);\n  let [showEdit, setShowEdit] = useState(false);\n  let [showDelete, setShowDelete] = useState(false);\n\n  function handleShowModal() {\n    setShowModal(prevState => {\n      return !prevState;\n    });\n    setShowEdit(prevState => {\n      if (prevState) return !prevState;\n      return prevState;\n    });\n    setShowDelete(prevState => {\n      if (prevState) return !prevState;\n      return prevState;\n    });\n  }\n\n  function handleOpenEdit() {\n    handleShowModal();\n    /* must call after show modal since show modal\n     * will call setShowEdit(false) if it finds it true\n     * in order to handle the closing logic\n     */\n\n    setShowEdit(true);\n  }\n\n  function handleOpenDelete() {\n    handleShowModal();\n    /* must call after show modal since show modal\n     * will call setShowEdit(false) if it finds it true\n     * in order to handle the closing logic\n     */\n\n    setShowDelete(true);\n  }\n  /*\n  function handleEditSubmit()\n  {\n  }\n  \tfunction handleDeleteConfirmation()\n  {\n  }\n  */\n\n\n  let qcomps = questions.map(q => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      q: q,\n      onDelete: handleOpenDelete,\n      onEdit: handleOpenEdit\n    }, q.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this);\n  });\n\n  let extraContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      children: [showDelete && /*#__PURE__*/_jsxDEV(DeleteConfirmation, {\n        onCancel: handleShowModal,\n        question: questions[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), showEdit && /*#__PURE__*/_jsxDEV(EditForm, {\n        question: questions[0],\n        choices: choices,\n        onCancel: handleShowModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      onClick: handleShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(QuestionList, {\n      children: qcomps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 4\n    }, this), showModal && extraContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MainPage, \"jAF8Mud/IJ7OAxA3OdMS6/nohtw=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/mnt/shared_partition/gonzalo/Facultad/programacionI/react_tutorial/src/pages/MainPage.js"],"names":["React","useState","useEffect","QuestionList","Question","EditForm","DeleteConfirmation","Modal","Backdrop","csrftoken","MainPage","showModal","setShowModal","showEdit","setShowEdit","showDelete","setShowDelete","handleShowModal","prevState","handleOpenEdit","handleOpenDelete","qcomps","questions","map","q","id","extraContent","choices"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nimport QuestionList from \"../components/QuestionList\";\nimport Question from \"../components/Question\";\nimport EditForm from \"../components/EditForm\";\nimport DeleteConfirmation from \"../components/DeleteConfirmation\";\n\nimport Modal from \"../layout/Modal\";\nimport Backdrop from \"../layout/Backdrop\";\n\nimport csrftoken from \"../utils/csrf\";\n\nfunction MainPage()\n{\n\n\t/*\n\tlet questions = [\n\t\t{\n\t\t\tquestion_text: \"What?\",\n\t\t\tid: 1,\n\t\t},\n\t\t{\n\t\t\tquestion_text: \"Who?\",\n\t\t\tid: 2,\n\t\t},\n\t\t{\n\t\t\tquestion_text: \"What's the fastest animal alive?\",\n\t\t\tid: 3,\n\t\t}\n\t];\n\n\tlet choices = [\n\t\t{\n\t\t\tid: 1,\n\t\t\tchoice_text: \"Don't know\",\n\t\t\tvotes: 0,\n\t\t\tquestion: 1,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tchoice_text: \"???\",\n\t\t\tvotes: 2,\n\t\t\tquestion: 1,\n\t\t}\n\n\t]\n\t/* end of dummy values */\n\n\tlet [ showModal, setShowModal] = useState(false);\n\tlet [ showEdit, setShowEdit ] = useState(false);\n\tlet [ showDelete, setShowDelete ] = useState(false);\n\n\tfunction handleShowModal()\n\t{\n\t\tsetShowModal((prevState)=> {\n\t\t\treturn !prevState;\n\t\t});\n\n\t\tsetShowEdit((prevState)=> {\n\t\t\tif (prevState)\n\t\t\t\treturn !prevState;\n\t\t\treturn prevState;\n\t\t});\n\n\t\tsetShowDelete((prevState)=> {\n\t\t\tif (prevState)\n\t\t\t\treturn !prevState;\n\t\t\treturn prevState;\n\t\t});\n\t}\n\n\tfunction handleOpenEdit()\n\t{\n\t\thandleShowModal();\n\t\t/* must call after show modal since show modal\n\t\t * will call setShowEdit(false) if it finds it true\n\t\t * in order to handle the closing logic\n\t\t */\n\t\tsetShowEdit(true);\n\t}\n\n\tfunction handleOpenDelete()\n\t{\n\t\thandleShowModal();\n\t\t/* must call after show modal since show modal\n\t\t * will call setShowEdit(false) if it finds it true\n\t\t * in order to handle the closing logic\n\t\t */\n\t\tsetShowDelete(true);\n\t}\n\n\t/*\n\tfunction handleEditSubmit()\n\t{\n\t}\n\n\tfunction handleDeleteConfirmation()\n\t{\n\t}\n\t*/\n\n\tlet qcomps = questions.map((q) => {\n\t\treturn (\n\t\t\t\t<Question key={ q.id }\n\t\t\t\tq={ q }\n\t\t\t\tonDelete={ handleOpenDelete }\n\t\t\t\tonEdit={ handleOpenEdit }\n\t\t\t\t/>\n\t\t);\n\t});\n\n\tlet extraContent = (\n\t\t<React.Fragment>\n\t\t<Modal>\n\t\t\t{ showDelete &&\n\t\t\t\t<DeleteConfirmation onCancel={ handleShowModal } question={ questions[0] }/>\n\t\t\t}\n\t\t\t{ showEdit &&\n\t\t\t\t<EditForm\n\t\t\t\tquestion={ questions[0] }\n\t\t\t\tchoices={ choices }\n\t\t\t\tonCancel= { handleShowModal }\n\t\t\t\t/>\n\t\t\t}\n\t\t</Modal>\n\t\t<Backdrop onClick={ handleShowModal } />\n\t\t</React.Fragment>\n\t);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<QuestionList>{ qcomps }</QuestionList>\n\t\t\t{ showModal && extraContent }\n\t\t</React.Fragment>\n\t);\n}\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}